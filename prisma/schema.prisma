datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../src/prisma/client"
}

enum UserRole {
  GUEST
  COMPANY
  ALUMNI
}

model User {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  role        UserRole      @default(GUEST)
  username    String        @unique
  displayName String?
  verified    String        @default("false") // "true", "false", "pending"
  application Application[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Resume      Resume[]

  @@map("user")
}

enum Gender {
  MALE
  FEMALE
  UNSPECIFIED
}

model UserProfile {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  avatarUrl       String?
  website         String?
  phone           String?
  email           String        @unique
  description     String?
  gender          Gender
  birthday        String
  identityNumber  String        @unique
  location        String?
  talent          String?
  education       String?
  experience      String?
}

model Application {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  jobId       String   @db.ObjectId
  companyId   String   @db.ObjectId
  status      String   @default("pending") // "pending", "reviewed", "accepted", "rejected"
  appliedAt   DateTime
  resumeId    String
  coverLetter String
  user        User     @relation(fields: [userId], references: [id])

  @@map("application")
}

model Company {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  logoUrl           String?
  categoryId        String           @db.ObjectId
  capital           Int?
  numberOfEmployees Int?
  website           String?
  phone             String?
  fax               String?
  address           String?
  email             String?
  description       String?
  jobs              Job[]
  CompanyCategory   CompanyCategory? @relation(fields: [categoryId], references: [id])

  @@map("company")
}

model Job {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  companyId         String  @db.ObjectId
  description       String
  categoryId        String  @db.ObjectId
  salaryMin         Int     @default(0)
  salaryMax         Int     @default(0)
  negotiable        Boolean
  employmentType    String  @default("full-time") // "part-time", "contract", "internship"
  location          String? // "remote", "on-site"
  management        String? // "yes", "no"
  businessTrip      String? // "yes", "no"
  workingHours      String?
  startDate         String?
  numberOfPositions Int?
  experience        String?
  education         String?
  major             String?
  language          String?
  skills            String?
  others            String?
  benefits          String?

  company  Company     @relation(fields: [companyId], references: [id])
  category JobCategory @relation(fields: [categoryId], references: [id])

  @@map("job")
}

model CompanyCategory {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String    @unique
  companies Company[]

  @@map("company_category")
}

model JobCategory {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
  jobs Job[]

  @@map("job_category")
}

model Resume {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  fileName  String
  fileUrl   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model AlumniRegistration {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  email              String   @unique
  name               String
  phone              String
  notes              String?
  studentCardFront   String?
  studentCardBack    String?
  idDocumentFront    String?
  idDocumentBack     String?
  idDocumentPassport String?
  status             String   @default("pending") // "pending", "approved", "rejected"
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@map("alumni_registration")
}

model CompanyRegistration {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  email       String   @unique
  companyId   String
  companyName String
  name        String
  phone       String
  notes       String?
  status      String   @default("pending") // "pending", "approved", "rejected"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("company_registration")
}
