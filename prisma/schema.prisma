datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../src/prisma/client"
}

enum UserRole {
  GUEST
  COMPANY
  ALUMNI
  ADMIN
  SUPERADMIN
}

enum AccountStatus {
  UNVERIFIED
  VERIFIED
  PENDING
  INACTIVE
  BANNED
}

model User {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  email       String        @unique
  role        UserRole      @default(GUEST)
  username    String        @unique
  avatarUrl   String
  displayName String?
  status      AccountStatus @default(UNVERIFIED)
  application Application[]
  userProfile UserProfile[]
  resume      Resume[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("user")
}

enum Gender {
  MALE
  FEMALE
  UNSPECIFIED
}

model UserProfile {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  userId         String  @db.ObjectId
  user           User    @relation(fields: [userId], references: [id])
  avatarUrl      String?
  website        String?
  phone          String?
  email          String  @unique
  description    String?
  gender         Gender
  birthday       String
  identityNumber String  @unique
  location       String?
  talent         String?
  education      String?
  experience     String?

  @@map("user_profile")
}

enum ApplicationStatus {
  PENDING
  REVIEWED
  ACCEPTED
  REJECTED
}

model Application {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  userId      String            @db.ObjectId
  jobId       String            @db.ObjectId
  companyId   String            @db.ObjectId
  status      ApplicationStatus @default(PENDING)
  appliedAt   DateTime
  resumeId    String
  coverLetter String
  user        User              @relation(fields: [userId], references: [id])

  @@map("application")
}

model Company {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  logoUrl           String?
  categoryId        String           @db.ObjectId
  capital           Int?
  numberOfEmployees Int?
  website           String?
  phone             String?
  fax               String?
  address           String?
  email             String?
  description       String?
  jobs              Job[]
  CompanyCategory   CompanyCategory? @relation(fields: [categoryId], references: [id])

  @@map("company")
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
}

enum Location {
  REMOTE
  ONSITE
}

model Job {
  id                String         @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  companyId         String         @db.ObjectId
  description       String
  categoryId        String         @db.ObjectId
  salaryMin         Int            @default(0)
  salaryMax         Int            @default(0)
  negotiable        Boolean
  employmentType    EmploymentType @default(FULL_TIME) // "part-time", "contract", "internship"
  location          Location?
  management        String?
  businessTrip      String?
  workingHours      String?
  startDate         String?
  numberOfPositions Int?
  experience        String?
  education         String?
  major             String?
  language          String?
  skills            String?
  others            String?
  benefits          String?

  company  Company     @relation(fields: [companyId], references: [id])
  category JobCategory @relation(fields: [categoryId], references: [id])

  @@map("job")
}

model CompanyCategory {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String    @unique
  companies Company[]

  @@map("company_category")
}

model JobCategory {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
  jobs Job[]

  @@map("job_category")
}

model Resume {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  fileName  String
  fileUrl   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("resume")
}

enum RegistrationStatus {
  PENDING
  APPROVED
  REJECTED
}

model AlumniRegistration {
  id                 String             @id @default(auto()) @map("_id") @db.ObjectId
  email              String             @unique
  name               String
  phone              String
  notes              String?
  studentCardFront   String?
  studentCardBack    String?
  idDocumentFront    String?
  idDocumentBack     String?
  idDocumentPassport String?
  status             RegistrationStatus @default(PENDING)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt

  @@map("alumni_registration")
}

model CompanyRegistration {
  id          String             @id @default(auto()) @map("_id") @db.ObjectId
  email       String             @unique
  companyId   String
  companyName String
  name        String
  phone       String
  notes       String?
  status      RegistrationStatus @default(PENDING)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  @@map("company_registration")
}
