datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../src/prisma/client"
}

enum UserRole {
  GUEST
  COMPANY
  ALUMNI
  ADMIN
  SUPERADMIN
}

enum AccountStatus {
  UNVERIFIED
  VERIFIED
  PENDING
  INACTIVE
  BANNED
}

model User {
  id                  String                @id @default(auto()) @map("_id") @db.ObjectId
  email               String                @unique
  role                UserRole              @default(GUEST)
  username            String                @unique
  avatarUrl           String
  displayName         String?
  status              AccountStatus         @default(UNVERIFIED)
  application         Application[]
  userProfile         UserProfile?
  Company             Company?
  resume              Resume[]
  CompanyRegistration CompanyRegistration[]
  AlumniRegistration  AlumniRegistration[]
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

enum Gender {
  MALE
  FEMALE
  UNSPECIFIED
}

model UserProfile {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  email          String   @unique
  user           User     @relation(fields: [email], references: [email])
  website        String?
  phone          String?
  description    String?
  gender         Gender   @default(UNSPECIFIED)
  birthday       String
  identityNumber String   @unique
  location       String?
  talent         String?
  education      String?
  experience     String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

enum ApplicationStatus {
  PENDING
  REVIEWED
  ACCEPTED
  REJECTED
}

model Application {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  email       String            @unique
  jobId       String            @db.ObjectId
  companyId   String            @db.ObjectId
  status      ApplicationStatus @default(PENDING)
  appliedAt   DateTime
  resumeId    String
  coverLetter String
  user        User              @relation(fields: [email], references: [email])
}

model Company {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  email             String           @unique
  unifiedNumber     String           @unique
  name              String
  logoUrl           String?
  categoryId        String?          @db.ObjectId
  capital           Int?
  tags              String[]
  numberOfEmployees Int?
  website           String?
  phone             String?
  fax               String?
  address           String?
  description       String?
  published         Boolean          @default(false)
  jobs              Job[]
  CompanyCategory   CompanyCategory? @relation(fields: [categoryId], references: [id])
  user              User             @relation(fields: [email], references: [email])
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
}

enum Location {
  REMOTE
  ONSITE
}

model Job {
  id                String         @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  companyId         String         @db.ObjectId
  description       String
  categoryId        String?        @db.ObjectId
  salaryMin         Int            @default(0)
  salaryMax         Int            @default(0)
  negotiable        Boolean
  employmentType    EmploymentType @default(FULL_TIME)
  location          Location?
  management        String?
  businessTrip      String?
  workingHours      String?
  startDate         String?
  numberOfPositions Int?
  experience        String?
  education         String?
  major             String?
  language          String?
  skills            String?
  others            String?
  benefits          String?
  company           Company        @relation(fields: [companyId], references: [id])
  category          JobCategory?   @relation(fields: [categoryId], references: [id])
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

model CompanyCategory {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String    @unique
  companies Company[]
}

model JobCategory {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
  jobs Job[]
}

model Resume {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  name      String
  objectKey String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [email], references: [email], onDelete: Cascade)
}

enum RegistrationStatus {
  PENDING
  APPROVED
  REJECTED
}

model AlumniRegistration {
  id                 String             @id @default(auto()) @map("_id") @db.ObjectId
  email              String
  name               String
  phone              String
  notes              String?
  studentCardFront   String?
  studentCardBack    String?
  idDocumentFront    String?
  idDocumentBack     String?
  idDocumentPassport String?
  status             RegistrationStatus @default(PENDING)
  user               User               @relation(fields: [email], references: [email], onDelete: Cascade)
  rejectReason       String?
  rejectAt           DateTime?
  approvedAt         DateTime?
  approvedBy         String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}

model CompanyRegistration {
  id           String             @id @default(auto()) @map("_id") @db.ObjectId
  email        String
  companyId    String
  companyName  String
  name         String
  phone        String
  notes        String?
  status       RegistrationStatus @default(PENDING)
  user         User               @relation(fields: [email], references: [email], onDelete: Cascade)
  rejectReason String?
  rejectAt     DateTime?
  approvedAt   DateTime?
  approvedBy   String?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
}
